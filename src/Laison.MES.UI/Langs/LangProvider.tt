<#@ template language="C#" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Laison.MES.UI.Langs" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>

<#	
string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
    var jsonString = File.ReadAllText(Path.Combine(projectPath,"Langs/LangProvider.json"));
    
    var langDic=JsonConvert.DeserializeObject<Dictionary<string,string>>(jsonString);
#>
using System.ComponentModel;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using HandyControl.Tools;
using HandyControl.Properties.Langs;

namespace Laison.MES.UI.Langs
{
    public class LangProvider : INotifyPropertyChanged
    {
        internal static LangProvider Instance { get; } = ResourceHelper.GetResource<LangProvider>("MESLangs");

        private static string CultureInfoStr;

        public static CultureInfo Culture
        {
            get => Lang.Culture;
            set
            {
                if (value == null) return;
                if (Equals(CultureInfoStr, value.EnglishName)) return;
                Lang.Culture = value;
                CultureInfoStr = value.EnglishName;

                Instance.UpdateLangs();
            }
        }

        public static string GetLang(string key) => Lang.ResourceManager.GetString(key, Culture);

        public static void SetLang(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string key) =>
            BindingOperations.SetBinding(dependencyObject, dependencyProperty, new Binding(key)
            {
                Source = Instance,
                Mode = BindingMode.OneWay
            });

		private void UpdateLangs()
        {
<#foreach(var item in langDic){#>
			OnPropertyChanged(nameof(<#=item.Key#>));
<#}#>
        }

<#foreach(var item in langDic){#>
        /// <summary>
        ///<#=item.Value#>
        ///</summary>
		public string <#=item.Key#> => Lang.<#=item.Key#>;

<#}#>

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class LangKeys
    {
<#foreach(var item in langDic){#>
        /// <summary>
        /// <#=item.Value#>
        ///</summary>
		public static string <#=item.Key#> = nameof(<#=item.Key#>);

<#}#>
    }
}

